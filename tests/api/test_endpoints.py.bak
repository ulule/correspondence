import pytest
from httpx import AsyncClient
from sqlalchemy.ext.asyncio import AsyncSession

from correspondence.models import Board, Node


@pytest.mark.asyncio
async def test_node_list(aclient: AsyncClient, default_board: Board):
    response = await aclient.get(f"/api/boards/{default_board.id}/nodes")
    assert response.status_code == 200


@pytest.mark.asyncio
async def test_node_create(
    aclient: AsyncClient, default_board: Board, asession: AsyncSession
):
    response = await aclient.post(
        f"/api/boards/{default_board.id}/nodes", json={"type": "text"}
    )
    assert response.status_code == 201

    data = response.json()
    assert "id" in data

    node = await Node.aget(data["id"], session=asession)
    assert node is not None
    assert node.type == Node.Type.TEXT


@pytest.mark.asyncio
async def test_board_create(aclient: AsyncClient, asession: AsyncSession):
    board_name = "test"
    response = await aclient.post("/api/boards", json={"name": board_name})
    assert response.status_code == 201

    data = response.json()
    assert "id" in data
    assert data.get("name") == board_name

    board = await Board.aget(data["id"], session=asession)
    assert board is not None
    assert board.name == board_name
